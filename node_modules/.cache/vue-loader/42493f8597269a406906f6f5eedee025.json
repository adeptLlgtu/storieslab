{"remainingRequest":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\src\\components\\v-tarif.vue?vue&type=template&id=d0d88fea&","dependencies":[{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\src\\components\\v-tarif.vue","mtime":1622936645756},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\localhost\\storieslab\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}