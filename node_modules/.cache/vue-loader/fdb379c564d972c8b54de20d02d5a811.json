{"remainingRequest":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\src\\components\\v-modules.vue?vue&type=template&id=ade23560&","dependencies":[{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\src\\components\\v-modules.vue","mtime":1622926203276},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DNS\\Desktop\\OSPanel\\domains\\curs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}